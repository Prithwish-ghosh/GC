library(circular)
gc = read.csv(file.choose())
head(gc)
Gc = gc[-1,]
head(Gc)
Gc$GLON = as.numeric(Gc$GLON)
Gc$GLAT = as.numeric(Gc$GLAT)
Gc$RAJ2000 = as.numeric(Gc$RAJ2000)
Gc$DEJ2000 = as.numeric(Gc$DEJ2000)
Gc$Rsun = as.numeric(Gc$Rsun)
Gc$Rgc = as.numeric(Gc$Rgc)
Gc$Vt = as.numeric(Gc$Vt)
Gc$X.Fe.H. = as.numeric(Gc$X.Fe.H.)
Gc$c = as.numeric(Gc$c)

watson.test(Gc$GLON, alpha = 0.05, dist = "vonmises")
watson.test(Gc$GLAT, alpha = 0.05, dist = "vonmises")
watson.two.test(Gc$GLON, Gc$GLON, alpha = 0.05)
head(Gc)
clust_gc = Gc[,c(2,5:10,12)]
head(clust_gc)

library(mice)
library(missForest)
astr.mis = prodNA(clust_gc, noNA = 0.1)
#summary(astr.mis)
#md.pattern(astr.mis)

library(mice)
imputed_Data = mice(astr.mis, m=3, maxit = 1000, method = 'pmm', seed = 500)
complete_data = complete(imputed_Data , 3)
c_d = complete_data[,-1]
head(c_d)

wss = (nrow(c_d)-1)*sum(apply(c_d , 2, var))
for (i in 2:13)
{
  wss[i] =
    sum(kmeans(c_d , centers = i)$withinss)
}
plot(1:13 , wss , type = "l" , 
     xlab = "number of clusters" ,
     ylab = "within group of sum of  square")

kmeans = kmeans(c_d, 2)

kmeans
kmeans$size

set.seed(100)
library(MASS)
group = c(rep (1, 65), rep (2, 81))
head(group) 
discr = lda(c_d,group)
tab1 = table(predict(discr)$class, group,dnn = c('Actual Group','Predicted Group'))
tab1

clus = cbind(c_d ,clusters =  kmeans$cluster)
head(clus)


clust_data = data.frame(GLON = as.numeric(Gc$GLON), GLAT = as.numeric(Gc$GLAT), 
                        Rsun= as.numeric(complete_data$Rsun),
                       Rgc =   as.numeric(complete_data$Rgc), Vt= as.numeric(complete_data$Vt),
                       X.Fe.H.  = as.numeric(complete_data$X.Fe.H.) ,
                       c = as.numeric(complete_data$c))
sph_gc = as.matrix(clust_data)
sum(is.numeric(sph_gc))

View(sph_gc)

sph_k = skmeans::skmeans(sph_gc, 2)

clus2 = cbind(clust_data, clusters =  sph_k$cluster)
head(clus2)
head(clus)

cluster_labels = kmeans$cluster
cluster_1_data <- clus[cluster_labels == 1, ]
cluster_2_data <- clus[cluster_labels == 2, ]

cluster_label = sph_k$cluster
cluster_1_dat <- clus2[cluster_label == 1, ]
cluster_2_dat <- clus2[cluster_label == 2, ]


intersection <- length(intersect(cluster_2_data, cluster_2_dat))
union <- length(union(cluster_2_data, cluster_2_dat))
jaccard_similarity <- intersection / union
jaccard_similarity

result <- t.test(cluster_1_dat, cluster_1_data)
result

library(Directional)
library(movMF)

d = cbind(Gc$GLAT, Gc$GLON)
Evmf <- function(K){
  movMF(d, k= K, control = list(nruns = 20))
}

set.seed(123)
Esd = lapply(1:10, Evmf)
Esd
sapply(Esd, BIC)
